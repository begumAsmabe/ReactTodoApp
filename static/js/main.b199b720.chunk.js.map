{"version":3,"sources":["components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","useState","task","setTask","tasklist","setTasklist","className","type","name","id","onChange","e","target","value","handleChange","placeholder","onClick","taskDetails","Math","floor","random","isCompleted","map","t","preventDefault","element","findIndex","elem","newTaskList","taskCompleted","filter","deleteTask","App","style","width","backgroundColor","border","float","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAwDeA,MAtDf,WAAiB,IAAD,EACYC,mBAAS,IADrB,mBACLC,EADK,KACCC,EADD,OAEoBF,mBAAS,IAF7B,mBAELG,EAFK,KAEKC,EAFL,KAkCZ,OACI,yBAAKC,UAAU,QACX,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAClCC,SAAU,SAACC,GAAD,OAlCC,SAACA,GACjBR,EAAQQ,EAAEC,OAAOC,OAiCGC,CAAaH,IAC5BI,YAAY,qBACZ,4BAAQT,UAAU,UAAUU,QAjCrB,WACX,GAAU,KAAPd,EAAU,CACT,IAAMe,EAAa,CACfR,GAAGS,KAAKC,MAAoB,IAAdD,KAAKE,UACnBP,MAAMX,EACNmB,aAAY,GAEhBhB,EAAY,GAAD,mBAAKD,GAAL,CAAca,QA0BzB,OACA,6BACCb,IAAW,GACZ,4BACKA,EAASkB,KAAI,SAAAC,GAAC,OACX,wBAAIjB,UAAWiB,EAAEF,YAAY,YAAY,YAAaE,EAAEV,MACxD,4BAAQP,UAAU,YAAYU,QAAS,SAAAL,GAAC,OAxBnC,SAACA,EAAEF,GACpBE,EAAEa,iBAEF,IAAMC,EAASrB,EAASsB,WAAU,SAAAC,GAAI,OAAEA,EAAKlB,IAAIA,KAE3CmB,EAAY,YAAIxB,GAEtBwB,EAAYH,GAAZ,2BACOG,EAAYH,IADnB,IAEIJ,aAAY,IAEhBhB,EAAYuB,GAa0CC,CAAclB,EAAEY,EAAEd,MAA5D,aACA,4BAAQH,UAAU,SAASU,QAAS,SAACL,GAAD,OA9BlC,SAACA,EAAEF,GACjBE,EAAEa,iBACFnB,EAAYD,EAAS0B,QAAO,SAACP,GAAD,OAAKA,EAAEd,IAAIA,MA4BcsB,CAAWpB,EAAEY,EAAEd,MAAxD,eAGN,O,QC5BCuB,MAjBf,WACE,OACE,yBAAK1B,UAAU,OACb,6BACA,4BAAQ2B,MAAO,CAACC,MAAM,MAAMC,gBAAiB,mBAAmBC,OAAQ,kBAAkBC,MAAM,UAChG,kBAAC,IAAD,CAA0BJ,MAAO,CAACK,MAAM,SAAWvB,YAAc,sBAEjE,8BAEA,0BAAMT,UAAU,SAAhB,aAPF,IAO2C,6BAEzC,kBAAC,EAAD,QCLciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b199b720.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport \"./todoapp.css\"\r\nfunction Todo() {\r\n    const [task, setTask] = useState(\"\")\r\n    const [tasklist, setTasklist] = useState([])\r\n    const handleChange=(e)=>{\r\n       setTask(e.target.value)\r\n    }\r\n    const AddTask =()=>{\r\n        if(task!==\"\"){\r\n            const taskDetails ={\r\n                id:Math.floor(Math.random()*1000),\r\n                value:task,\r\n                isCompleted:false,\r\n            }\r\n            setTasklist([...tasklist,taskDetails])\r\n        }\r\n    }\r\n    const deleteTask =(e,id)=>{\r\n        e.preventDefault();\r\n        setTasklist(tasklist.filter((t)=>t.id!=id))\r\n    }\r\n\r\n    const taskCompleted =(e,id)=>{\r\n        e.preventDefault()\r\n        //find index of element\r\n        const element =tasklist.findIndex(elem=>elem.id==id)\r\n        //copy array\r\n        const newTaskList=[...tasklist]\r\n        //edit our element\r\n        newTaskList[element]={\r\n            ...newTaskList[element],\r\n            isCompleted:true\r\n        }\r\n        setTasklist(newTaskList)\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            <input type=\"text\" name=\"text\" id=\"text\" \r\n            onChange={(e)=>handleChange(e)}\r\n            placeholder=\"Add task here...\"/>\r\n            <button className=\"add-btn\" onClick={AddTask}>Add</button>\r\n            <br/>\r\n            {tasklist!==[]?  \r\n            <ul>\r\n                {tasklist.map(t=>\r\n                    <li className={t.isCompleted?\"crossText\":\"listitem\"}>{t.value}\r\n                    <button className=\"completed\" onClick={e=>taskCompleted(e,t.id)}>Completed</button>                   \r\n                    <button className=\"delete\" onClick={(e)=>deleteTask(e,t.id)}>Delete</button>\r\n                    </li>)}\r\n            </ul>\r\n             :null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n// import TodoApp from \"./components/TodoApp\";\r\nimport Todo from \"./components/Todo\"\r\nimport {DateRangePickerComponent} from \"@syncfusion/ej2-react-calendars\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n      <button style={{width:\"25%\",backgroundColor: \"rgb(122, 134, 8)\",border: \"2px solid white\",float:\"right\"}}>\r\n      <DateRangePickerComponent style={{color:\"white\"}}  placeholder  =\"Enter date range\"/>\r\n      </button>\r\n      <br/>\r\n      </div>\r\n      <span className=\"title\">Todo List</span> <br />\r\n      {/* <TodoApp /> */}\r\n      <Todo/>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}